# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Library Notebooks/03_Visualize.ipynb.

# %% auto 0
__all__ = ['plot']

# %% ../nbs/Library Notebooks/03_Visualize.ipynb 4
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
import PredictiveMaintenance2.Datasets as Datasets

# %% ../nbs/Library Notebooks/03_Visualize.ipynb 6
def plot(feature_type: str , # whether feature is numerical or categorical
         feature : str , # name of feature
         dataset : pd.DataFrame , # dataframe of dataset
         boxplot : bool = True , # whether draw box plot or not 
         histogram : bool= True , # whether draw histogram or not
         barchart : bool= True , # whether to draw bar chart or not     
        ):
    
    try:
        if feature_type == 'Numerical':
            # Creating an empty chart
            fig, ((ax1, ax2)) = plt.subplots(1, 2,  figsize=(15, 4))

            # Extracting the feature values
            x = dataset[feature].values

            # Boxplot
            ax1.boxplot(x)
            ax1.set_title( f'Boxplot for {feature}' )

             # Histogram
            ax2.hist(x, bins=20)
            ax2.set_title( f'Histogram for {feature}' )

            # Display
            plt.show()

        elif feature_type == 'Categorical':
            # Create an empty chart
            fig, ax = plt.subplots(figsize=(6, 6))

            # Extracting the feature values
            x = dataset[feature].values

            # Counting the number of occurrences for each category
            data = Counter(x)
            category = list(data.keys())
            counts = list(data.values())

            # Boxplot
            ax.bar(category, counts)

            # Display
            plt.title( f'Barchart for {feature}' )
            plt.xlabel( f'each {feature} ID')
            plt.ylabel ( f'count of each {feature}')
            plt.show() 
            
        elif feature_type == 'time':
            # Create an empty chart
            fig, ax = plt.subplots(figsize=(6, 6))
            
            # Showing the histogram of the rul for the failure event = false
            time_0 = dataset.loc[dataset['failure'] == 0, feature]
            ax.hist(time_0, bins=30, alpha=0.3, color='blue', label = 'not failed yet')

            # Showing the histogram of the rul for the failure event = true
            time_1 = dataset.loc[dataset['failure'] == 1, feature]
            ax.hist(time_1, bins=20, alpha=0.7, color='black', label = 'Failed')
            ax.set_title( 'Histogram - Remaining Useful Life time', fontsize=15)
            plt.show()
        
        elif feature_type == 'event':
            # Create an empty chart
            fig, ax = plt.subplots(figsize=(6, 6))
            
            # Counting the number of occurrences for each category 
            data = Counter(dataset['failure'].replace({0:'not Failed yet', 1:'Failed'}))
            category = list(data.keys())
            counts = list(data.values())
            idx = range(len(counts))

            # Displaying the occurrences of the event/censoring
            ax.bar(idx, counts)
            ax.set_xticks(idx)
            ax.set_xticklabels(category)
            ax.set_title( 'Occurences of the event/censoring', fontsize=15)
            plt.show()
            
        else:
            raise Unsupported_FeatureType_Exception(f"Cannot extract feature{feature}")
            
    except Exception as e:
        print(e)
        return None  
